[user]
  name = 
  email = 
[branch]
	autosetupmerge = true
[color]
  ui = true
[color "diff"]
  whitespace = red reverse
[core]
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	quotepath = false
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  tool = diffmerge
[mergetool "diffmerge"]
  cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
  trustExitCode = true

[diff "exif"]
    # Diff images with exiftool rather than doing a binary diff
    textconv = exiftool
[diff "png"]
    # Diff images with exiftool rather than doing a binary diff
    textconv = exif
[diff "jpg"]
    # Diff images with exiftool rather than doing a binary diff
    textconv = exif
[diff]
  tool = diffmerge
  # external = ~/.git-opendiff
[difftool "diffmerge"]
  cmd = diffmerge $LOCAL $REMOTE

[alias]
  changes = diff --name-status -r
  co = checkout
  st = status
  ln = log --name-status
  brieflog = log --pretty='format:%ai %an. %s'
  wclog = log --pretty='format:%s' --no-merges
  who = shortlog -s --
  ci = commit
  br = branch
  po = pull origin 
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  w = whatchanged --pretty='format:%ai %an. %s'
  # show list of contributors in descending order by number of commits
  rank = shortlog -sn --no-merges
  # Search for a given string in all patches and print commit messages
  # example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  # example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  # example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

  # start-release
  # relstart = flow release start $(date -u +%Y%m%d%H%M%S)
  # relfinish = flow release finish 
  branchinfo = "!git show --summary `git merge-base --independent $1`"

[apply]
  # Warn about whitespace errors, and try to fix them
  whitespace = fix

[push]
  # When you do a git push origin, only push the current branch
  #  otherwise the default is to push all local branches
  default = current
# [format]
#  pretty="format:%ai - %an: %s%n"
[gui]
	pruneduringfetch = true


